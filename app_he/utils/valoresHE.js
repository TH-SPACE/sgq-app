// ================================================================================
// üí∞ M√≥dulo de Valores de Hora Extra (HE)
// ================================================================================
// Este m√≥dulo √© respons√°vel por carregar e fornecer os valores de hora extra
// baseados no cargo do colaborador e tipo de HE (50% ou 100%).
//
// Arquivo de dados: app_he/json/valores_he.json
// ================================================================================

const fs = require("fs");
const path = require("path");

// ================================================================================
// üìÅ Configura√ß√£o de Caminhos e Vari√°veis Globais
// ================================================================================

// Caminho absoluto para o arquivo JSON que cont√©m os valores de HE por cargo
const valoresHEPath = path.join(__dirname, "..", "json", "valores_he.json");

// Objeto que armazena os valores carregados do JSON
// Estrutura esperada: { "CARGO": { "50%": 123.45, "100%": 246.90 } }
let valoresPorCargo = {};

// ================================================================================
// üîÑ Carregamento Inicial dos Valores
// ================================================================================
// Os valores s√£o carregados uma √∫nica vez durante a inicializa√ß√£o do m√≥dulo.
// Isso garante melhor performance, pois n√£o √© necess√°rio ler o arquivo toda vez.

try {
  // L√™ o arquivo JSON de forma s√≠ncrona (OK na inicializa√ß√£o)
  const data = fs.readFileSync(valoresHEPath, "utf8");

  // Faz o parse do JSON e armazena na vari√°vel global
  valoresPorCargo = JSON.parse(data);

  console.log("‚úÖ Valores de HE carregados com sucesso!");
} catch (err) {
  // Log de erro caso o arquivo n√£o exista ou tenha formato inv√°lido
  console.error("‚ùå Erro ao carregar valores_he.json:", err);

  // Em caso de erro, valoresPorCargo permanece como objeto vazio {}
  // A fun√ß√£o getValorHora retornar√° 0 para qualquer consulta
}

// ================================================================================
// üîç Fun√ß√µes Auxiliares
// ================================================================================

/**
 * üíµ Obt√©m o valor da hora extra para um cargo e tipo espec√≠fico
 *
 * Consulta o objeto valoresPorCargo para retornar o valor correto baseado
 * no cargo do colaborador e no tipo de hora extra solicitado.
 *
 * @param {string} cargo - Cargo do colaborador (ex: "ENGENHEIRO", "TECNICO")
 * @param {string} tipoHE - Tipo de hora extra: "50%" ou "100%"
 * @returns {number} Valor da hora extra em reais (formato decimal)
 *
 * @example
 * getValorHora("ENGENHEIRO", "50%")  // retorna 123.45
 * getValorHora("TECNICO", "100%")    // retorna 246.90
 * getValorHora("CARGO_INVALIDO", "50%") // retorna 0
 *
 * Formato esperado do JSON:
 * {
 *   "ENGENHEIRO": {
 *     "50%": 123.45,
 *     "100%": 246.90
 *   },
 *   "TECNICO": {
 *     "50%": 85.50,
 *     "100%": 171.00
 *   }
 * }
 */
function getValorHora(cargo, tipoHE) {
  // Verifica se o cargo existe no objeto e se o tipo de HE est√° definido
  if (valoresPorCargo[cargo] && valoresPorCargo[cargo][tipoHE]) {
    // Retorna o valor convertido para n√∫mero decimal
    return parseFloat(valoresPorCargo[cargo][tipoHE]);
  }

  // Retorna 0 como valor padr√£o caso o cargo ou tipo n√£o seja encontrado
  // Isso evita erros de refer√™ncia undefined e permite tratamento no controller
  return 0;
}

// ================================================================================
// üì§ EXPORTS - Fun√ß√µes e dados dispon√≠veis para outros m√≥dulos
// ================================================================================

module.exports = {
  // Fun√ß√£o para obter valor espec√≠fico de HE
  getValorHora,

  // Objeto completo com todos os valores (√∫til para listagens e valida√ß√µes)
  valoresPorCargo
};
