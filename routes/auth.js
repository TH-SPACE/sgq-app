// üåê M√≥dulos e Configura√ß√µes
const express = require("express");
const router = express.Router();
const path = require("path");
const db = require("../db/db");
const ad = require("../ad/ad"); // usa activedirectory2 (para admin local)
const ActiveDirectory = require("activedirectory2"); // Importa o ActiveDirectory para criar inst√¢ncia tempor√°ria
const dotenv = require("dotenv");

dotenv.config();

// üîë Credenciais do admin local
const LOCAL_ADMIN_EMAIL = process.env.ADMIN_EMAIL;
const LOCAL_ADMIN_SENHA = process.env.ADMIN_SENHA;

// üîê Rota de login - Processa autentica√ß√£o de usu√°rio
router.post("/login", async (req, res) => {
  // Extrai email, senha e redirect do body da requisi√ß√£o
  const { email, senha, redirect = "/home" } = req.body;
  let user; // Vari√°vel para armazenar o usu√°rio autenticado

  try {
    // 1. Verifica se √© admin local
    if (email === LOCAL_ADMIN_EMAIL && senha === LOCAL_ADMIN_SENHA) {
      // Busca usu√°rio admin no banco de dados usando o AD padr√£o
      const [rows] = await db.mysqlPool.query(
        "SELECT * FROM users_thanos WHERE email = ?",
        [email]
      );

      if (rows.length === 0) {
        // Cria novo usu√°rio admin se n√£o existir
        const [result] = await db.mysqlPool.query(
          "INSERT INTO users_thanos (email, nome, perfil, ultimo_login) VALUES (?, ?, ?, NOW())",
          [email, "ADMIN LOCAL", "ADM"]
        );
        // Busca o usu√°rio rec√©m-criado
        const [newUserRows] = await db.mysqlPool.query(
          "SELECT * FROM users_thanos WHERE id = ?",
          [result.insertId]
        );
        user = newUserRows[0];
      } else {
        // Atualiza o usu√°rio existente e armazena
        user = rows[0];
        await db.mysqlPool.query(
          "UPDATE users_thanos SET ultimo_login = NOW() WHERE id = ?",
          [user.id]
        );
      }
    } else {
      // Cria inst√¢ncia do AD com as credenciais do usu√°rio
      const adUser = new ActiveDirectory({
        url: process.env.LDAP_URL,
        baseDN: process.env.LDAP_BASE_DN,
        username: email, // Usa o email do usu√°rio logado
        password: senha, // Usa a senha do usu√°rio logado
        referral: false,
        attributes: {
          user: [
            "displayName", "mail", "title"
          ]
        }
      });

      // 2. Autentica√ß√£o no Active Directory com a senha do usu√°rio
      await new Promise((resolve, reject) => {
        adUser.authenticate(email, senha, (err, auth) => {
          if (err || !auth) return reject(new Error("Usu√°rio ou senha inv√°lidos."));
          resolve(auth);
        });
      });

      // 3. Busca nome completo do usu√°rio no Active Directory
      const userInfo = await new Promise((resolve, reject) => {
        adUser.findUser(email, (err, user) => {
          if (err || !user) return reject(new Error("Usu√°rio n√£o encontrado no AD."));

          resolve(user);
        });
      });

      // Extrai informa√ß√µes do usu√°rio do AD
      const nome = userInfo.displayName || email.split(".")[0].toUpperCase();
      const cargo = userInfo.title || null; // Pega o cargo do usu√°rio

      // 4. Verifica/cria usu√°rio no banco de dados
      const [rows] = await db.mysqlPool.query(
        "SELECT * FROM users_thanos WHERE email = ?",
        [email]
      );

      if (rows.length === 0) {
        // Cria novo usu√°rio no banco com todas as informa√ß√µes
        const [result] = await db.mysqlPool.query(
          "INSERT INTO users_thanos (email, nome, perfil, ultimo_login, cargo) VALUES (?, ?, ?, NOW(), ?)",
          [email, nome.toUpperCase(), "USER", cargo]
        );

        if (result.insertId) {
          // Busca o usu√°rio rec√©m-criado
          const [newUserRows] = await db.mysqlPool.query(
            "SELECT * FROM users_thanos WHERE id = ?",
            [result.insertId]
          );
          user = newUserRows[0];
        }
      } else {
        // Atualiza usu√°rio existente com informa√ß√µes do AD
        user = rows[0];
        await db.mysqlPool.query(
          "UPDATE users_thanos SET ultimo_login = NOW(), cargo = ? WHERE id = ?",
          [cargo, user.id]
        );
      }
    }

    // 5. Prote√ß√£o - Verifica se o usu√°rio foi encontrado/criado
    if (!user) {
      console.error("Erro: usu√°rio n√£o encontrado nem criado!");
      return res.redirect("/?erro=email_nao_encontrado");
    }

    // Converte acessos em array (separados por v√≠rgula)
    const acessos = user.acessos ? user.acessos.split(",") : [];

    // Cria sess√£o do usu√°rio com informa√ß√µes essenciais
    req.session.usuario = {
      id: user.id,
      nome: user.nome,
      email: user.email,
      perfil: user.perfil,
      cargo: user.cargo, // Adiciona o cargo √† sess√£o
      acessos: acessos,
    };

    // Redirecionamento inteligente - usa redirect do body ou padr√£o
    const redirectUrl = req.body.redirect || "/home";

    // Fun√ß√£o para validar URL de redirecionamento (evita open redirect)
    function isValidRedirect(url) {
      return typeof url === 'string' &&
        url.startsWith('/') &&
        !url.startsWith('//') &&
        !url.includes('://');
    }

    // Usa URL segura para redirecionamento
    const safeRedirect = isValidRedirect(redirectUrl) ? redirectUrl : "/home";
    res.redirect(safeRedirect);

  } catch (err) {
    // Em caso de erro, redireciona com c√≥digo de erro
    console.error("Erro de autentica√ß√£o:", err.message || err);
    return res.redirect("/?erro=1");
  }
});

// üîì Rota de logout - Destr√≥i a sess√£o do usu√°rio
router.get("/logout", (req, res) => {
  req.session.destroy((err) => {
    if (err) console.error("Erro ao destruir sess√£o:", err);
    res.redirect("/"); // Redireciona para p√°gina inicial ap√≥s logout
  });
});

// üîì Rota de logout espec√≠fica para planejamento-he
router.post("/logout-he", (req, res) => {
  req.session.destroy((err) => {
    if (err) console.error("Erro ao destruir sess√£o:", err);
    res.redirect("/planejamento-he");
  });
});

module.exports = router;